/**
 * M√≥dulo de Hist√≥rico - Sistema de visualiza√ß√£o de dados hist√≥ricos
 * Gerencia a exibi√ß√£o e filtros dos relat√≥rios do sistema anterior
 */

class HistoricoManager {
    constructor() {
        this.dadosHistorico = {};
        this.filtrosAtivos = {
            periodo: 'todos',
            tipo: 'todos',
            departamento: 'todos'
        };
        this.paginacao = {
            paginaAtual: 1,
            itensPorPagina: 50,
            totalItens: 0
        };
        this.cacheManager = window.CacheManager ? new window.CacheManager() : null;
        this.init();
    }

    /**
     * Inicializa o m√≥dulo de hist√≥rico
     */
    init() {
        this.setupEventListeners();
        this.carregarDepartamentos();
        this.verificarPermissoes();
        this.inicializarSecoesFechadas();
    }

    /**
     * Inicializa todas as se√ß√µes como fechadas
     */
    inicializarSecoesFechadas() {
        const secoes = document.querySelectorAll('.historico-section');
        secoes.forEach(secao => {
            secao.classList.add('collapsed');
        });
    }

    /**
     * Configura os event listeners para a aba de hist√≥rico
     */
    setupEventListeners() {
        // Event listener para mudan√ßa de abas
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-tab="historico"]')) {
                this.carregarDadosHistorico();
            }
        });

        // Event listeners para filtros
        const filtros = ['historico-periodo', 'historico-tipo', 'historico-departamento'];
        filtros.forEach(id => {
            const elemento = document.getElementById(id);
            if (elemento) {
                elemento.addEventListener('change', () => {
                    this.aplicarFiltros();
                });
            }
        });

        // Event listeners para se√ß√µes colaps√°veis
        document.addEventListener('click', (e) => {
            if (e.target.closest('.historico-section .card-header')) {
                this.toggleSecao(e.target.closest('.historico-section'));
            }
        });

        // Monitora tentativas de bypass por manipula√ß√£o do DOM
        this.iniciarMonitoramentoSeguranca();
    }

    /**
     * Verifica se o usu√°rio tem permiss√£o para acessar o hist√≥rico
     */
    verificarPermissoes() {
        // Simula verifica√ß√£o de permiss√µes - em produ√ß√£o, isso viria do backend
        const usuarioAtual = this.obterUsuarioAtual();
        const temPermissao = this.verificarPermissaoUsuario(usuarioAtual);
        
        const historicoTab = document.getElementById('historico-tab');
        if (historicoTab) {
            historicoTab.style.display = temPermissao ? 'flex' : 'none';
        }
    }

    /**
     * Obt√©m informa√ß√µes do usu√°rio atual
     */
    obterUsuarioAtual() {
        // Simula obten√ß√£o do usu√°rio atual - em produ√ß√£o, isso viria do localStorage ou API
        return {
            id: 1,
            nome: 'Usu√°rio Teste',
            departamento: 'RH',
            cargo: 'Analista de RH',
            permissoes: ['rh', 'treinamento']
        };
    }

    /**
     * Verifica se o usu√°rio tem permiss√£o para acessar o hist√≥rico
     * Apenas usu√°rios dos setores "RH" ou "DEPARTAMENTO TREINAM&DESENVOLV" t√™m acesso
     */
    verificarPermissaoUsuario(usuario) {
        const setoresPermitidos = ['RH', 'DEPARTAMENTO TREINAM&DESENVOLV'];
        
        // Verifica se o departamento/setor do usu√°rio est√° na lista permitida
        if (usuario.departamento) {
            const departamentoUsuario = usuario.departamento.toUpperCase().trim();
            
            // Verifica correspond√™ncia exata ou parcial para varia√ß√µes do nome
            for (let setor of setoresPermitidos) {
                if (departamentoUsuario === setor || 
                    departamentoUsuario.includes('TREINAM') && departamentoUsuario.includes('DESENVOLV') ||
                    departamentoUsuario === 'RH' ||
                    departamentoUsuario === 'RECURSOS HUMANOS') {
                    return true;
                }
            }
        }
        
        // Verifica permiss√µes espec√≠ficas como fallback
        if (usuario.permissoes) {
            return usuario.permissoes.includes('rh') || 
                   usuario.permissoes.includes('treinamento') ||
                   usuario.permissoes.includes('historico');
        }
        
        return false;
    }

    /**
     * Mostra erro de permiss√£o quando usu√°rio n√£o autorizado tenta acessar
     */
    mostrarErroPermissao() {
        const container = document.getElementById('historico-content');
        if (container) {
            container.innerHTML = `
                <div style="text-align: center; padding: 60px 20px; color: #dc2626;">
                    <div style="font-size: 64px; margin-bottom: 20px;">üö´</div>
                    <h2 style="color: #dc2626; margin-bottom: 16px;">Acesso Negado</h2>
                    <p style="color: #6b7280; margin-bottom: 24px;">
                        Voc√™ n√£o tem permiss√£o para acessar o hist√≥rico de feedbacks.<br>
                        Apenas usu√°rios dos setores <strong>RH</strong> ou <strong>Departamento de Treinamento e Desenvolvimento</strong> podem acessar esta funcionalidade.
                    </p>
                    <button onclick="window.location.reload()" style="
                        background: #dc2626; 
                        color: white; 
                        border: none; 
                        padding: 12px 24px; 
                        border-radius: 6px; 
                        cursor: pointer;
                        font-weight: 500;
                    ">
                        Recarregar P√°gina
                    </button>
                </div>
            `;
        }
        
        // Oculta a aba novamente
        const historicoTab = document.querySelector('[data-tab="historico"]');
        if (historicoTab) {
            historicoTab.style.display = 'none';
        }
    }

    /**
     * Inicia monitoramento de seguran√ßa para detectar tentativas de bypass
     */
    iniciarMonitoramentoSeguranca() {
        // Monitora mudan√ßas no DOM da aba hist√≥rico
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                    const target = mutation.target;
                    
                    // Verifica se algu√©m est√° tentando tornar a aba hist√≥rico vis√≠vel
                    if (target.getAttribute('data-tab') === 'historico' || 
                        target.closest('[data-tab="historico"]')) {
                        
                        const usuarioAtual = this.obterUsuarioAtual();
                        if (!this.verificarPermissaoUsuario(usuarioAtual)) {
                            console.warn('üö® Tentativa de bypass detectada - ocultando aba novamente');
                            target.style.display = 'none';
                            this.mostrarErroPermissao();
                        }
                    }
                }
            });
        });

        // Observa mudan√ßas na aba hist√≥rico
        const historicoTab = document.querySelector('[data-tab="historico"]');
        if (historicoTab) {
            observer.observe(historicoTab, {
                attributes: true,
                attributeFilter: ['style', 'class']
            });
        }

        // Verifica periodicamente se a aba foi manipulada
        setInterval(() => {
            const usuarioAtual = this.obterUsuarioAtual();
            if (!this.verificarPermissaoUsuario(usuarioAtual)) {
                const historicoTab = document.querySelector('[data-tab="historico"]');
                const historicoContent = document.getElementById('historico-content');
                
                if (historicoTab && window.getComputedStyle(historicoTab).display !== 'none') {
                    console.warn('üö® Bypass detectado - aba hist√≥rico vis√≠vel sem permiss√£o');
                    historicoTab.style.display = 'none';
                    this.mostrarErroPermissao();
                }
                
                if (historicoContent && window.getComputedStyle(historicoContent).display !== 'none') {
                    console.warn('üö® Bypass detectado - conte√∫do hist√≥rico vis√≠vel sem permiss√£o');
                    this.mostrarErroPermissao();
                }
            }
        }, 2000); // Verifica a cada 2 segundos
    }

    /**
     * Carrega a lista de departamentos para o filtro baseado nos dados reais
     */
    carregarDepartamentos() {
        const select = document.getElementById('historico-departamento');
        if (!select) return;

        // Limpa op√ß√µes existentes (exceto "Todos os Departamentos")
        const opcoesPadrao = select.querySelector('option[value="todos"]');
        select.innerHTML = '';
        if (opcoesPadrao) {
            select.appendChild(opcoesPadrao);
        } else {
            const optionTodos = document.createElement('option');
            optionTodos.value = 'todos';
            optionTodos.textContent = 'Todos os Departamentos';
            select.appendChild(optionTodos);
        }

        // Extrai departamentos √∫nicos dos dados reais
        const departamentosSet = new Set();
        
        Object.values(this.dadosHistorico).forEach(dadosSecao => {
            const dados = dadosSecao.dados || dadosSecao;
            if (Array.isArray(dados)) {
                dados.forEach(item => {
                    // Busca em diferentes poss√≠veis nomes de colunas de departamento
                    const possiveisColunasDep = [
                        'Departamento', 'departamento', 'Para Departamento', 'Depto', 'Setor'
                    ];
                    
                    possiveisColunasDep.forEach(coluna => {
                        if (item[coluna] && item[coluna].toString().trim()) {
                            departamentosSet.add(item[coluna].toString().trim());
                        }
                    });
                });
            }
        });

        // Adiciona departamentos √∫nicos ao select
        Array.from(departamentosSet).sort().forEach(dept => {
            const option = document.createElement('option');
            option.value = dept.toLowerCase();
            option.textContent = dept;
            select.appendChild(option);
        });
    }

    /**
     * Carrega a lista de per√≠odos para o filtro baseado nos dados reais
     */
    carregarPeriodos() {
        const select = document.getElementById('historico-periodo');
        if (!select) return;

        // Limpa op√ß√µes existentes (exceto "Todos os Per√≠odos")
        const opcoesPadrao = select.querySelector('option[value="todos"]');
        select.innerHTML = '';
        if (opcoesPadrao) {
            select.appendChild(opcoesPadrao);
        } else {
            const optionTodos = document.createElement('option');
            optionTodos.value = 'todos';
            optionTodos.textContent = 'Todos os Per√≠odos';
            select.appendChild(optionTodos);
        }

        // Extrai anos √∫nicos dos dados reais
        const anosSet = new Set();
        
        Object.values(this.dadosHistorico).forEach(dadosSecao => {
            const dados = dadosSecao.dados || dadosSecao;
            if (Array.isArray(dados)) {
                dados.forEach(item => {
                    // Busca em diferentes poss√≠veis nomes de colunas de data
                    const possiveisColunasData = [
                        'Data', 'data', 'Data Admiss√£o', 'Data de Nascimento', 'Data de Cadastro',
                        '√öltimo Acesso', 'Data do turnover', 'Data √çnicio', 'Data Final',
                        'Data de cria√ß√£o', '√öltima atualiza√ß√£o'
                    ];
                    
                    possiveisColunasData.forEach(coluna => {
                        if (item[coluna]) {
                            const valorData = item[coluna].toString().trim();
                            if (valorData && valorData !== '-' && valorData !== 'N/A') {
                                // Usa a mesma fun√ß√£o de extra√ß√£o de anos
                                const anosEncontrados = this.extrairAnosDaData(valorData);
                                anosEncontrados.forEach(ano => anosSet.add(ano));
                            }
                        }
                    });
                });
            }
        });

        // Adiciona anos √∫nicos ao select em ordem decrescente
        Array.from(anosSet).sort((a, b) => b - a).forEach(ano => {
            const option = document.createElement('option');
            option.value = ano;
            option.textContent = ano;
            select.appendChild(option);
        });
    }

    /**
     * Carrega os dados hist√≥ricos quando a aba √© acessada
     */
    async carregarDadosHistorico() {
        try {
            // Verifica√ß√£o adicional de seguran√ßa no momento do carregamento
            const usuarioAtual = this.obterUsuarioAtual();
            if (!this.verificarPermissaoUsuario(usuarioAtual)) {
                console.error('üö´ Acesso negado: Usu√°rio n√£o autorizado para hist√≥rico');
                this.mostrarErroPermissao();
                return;
            }

            // Verifica se h√° dados em cache
            if (this.cacheManager) {
                const dadosCache = this.cacheManager.obterDadosHistorico('todos', this.filtrosAtivos);
                if (dadosCache) {
                    console.log('Carregando dados do cache');
                    this.dadosHistorico = dadosCache;
                    // Carrega filtros dinamicamente baseado nos dados
                    this.carregarDepartamentos();
                    this.carregarPeriodos();
                    this.aplicarFiltros();
                    return;
                }
            }
            
            // Carrega dados se n√£o estiver em cache
            await this.simularCarregamentoDados();
            
            // Armazena no cache
            if (this.cacheManager) {
                this.cacheManager.armazenarDadosHistorico('todos', this.dadosHistorico, this.filtrosAtivos);
            }
            
            // Carrega filtros dinamicamente baseado nos dados
            this.carregarDepartamentos();
            this.carregarPeriodos();
            
            this.aplicarFiltros();
        } catch (error) {
            console.error('Erro ao carregar dados hist√≥ricos:', error);
            this.mostrarErro('Erro ao carregar dados hist√≥ricos');
        }
    }

    /**
     * Carrega dados hist√≥ricos do backend (Python)
     */
    async simularCarregamentoDados() {
        try {
            console.log('üîÑ Carregando dados hist√≥ricos do backend...');
            
            // Faz requisi√ß√£o para o endpoint do backend
            const response = await fetch('/api/historico/dados', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                if (response.status === 403) {
                    // Usu√°rio n√£o autorizado - mostra erro de permiss√£o
                    const errorData = await response.json().catch(() => ({}));
                    console.error('üö´ Acesso negado pelo servidor:', errorData);
                    this.mostrarErroPermissao();
                    return;
                }
                throw new Error(`Erro HTTP: ${response.status}`);
            }
            
            const resultado = await response.json();
            
            if (resultado.success) {
                this.dadosHistorico = resultado.dados;
                console.log(`‚úÖ Dados hist√≥ricos carregados via ${resultado.processado_por}`);
                console.log(`üìÖ Processado em: ${resultado.timestamp}`);
                
                // Log de estat√≠sticas
                Object.keys(this.dadosHistorico).forEach(tipo => {
                    const registros = this.dadosHistorico[tipo].length;
                    console.log(`üìä ${tipo}: ${registros} registros`);
                });
            } else {
                throw new Error('Resposta do servidor indicou falha');
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao carregar dados hist√≥ricos do backend:', error);
            console.log('üîÑ Usando dados simulados como fallback...');
            
            // Fallback para dados simulados em caso de erro
            this.dadosHistorico = {
                avaliacao: this.gerarDadosAvaliacao(),
                feedback: this.gerarDadosFeedback(),
                humor: this.gerarDadosHumor(),
                colaboradores: this.gerarDadosColaboradores(),
                medias: this.gerarDadosMedias(),
                ranking: this.gerarDadosRanking(),
                resumo: this.gerarDadosResumo(),
                turnover: this.gerarDadosTurnover(),
                pdi: this.gerarDadosPDI(),
                pesquisas: this.gerarDadosPesquisas()
            };
        }
    }

    /**
     * Gera dados simulados para avalia√ß√£o de desempenho
     */
    gerarDadosAvaliacao() {
        const colaboradores = ['Jo√£o Silva', 'Maria Santos', 'Pedro Costa', 'Ana Oliveira', 'Carlos Lima'];
        const departamentos = ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'];
        const dados = [];

        for (let i = 0; i < 50; i++) {
            dados.push({
                id: i + 1,
                colaborador: colaboradores[Math.floor(Math.random() * colaboradores.length)],
                departamento: departamentos[Math.floor(Math.random() * departamentos.length)],
                avaliador: colaboradores[Math.floor(Math.random() * colaboradores.length)],
                nota: (Math.random() * 4 + 1).toFixed(1),
                dataAvaliacao: this.gerarDataAleatoria(),
                status: Math.random() > 0.2 ? 'Conclu√≠da' : 'Pendente',
                observacoes: 'Avalia√ß√£o de desempenho trimestral'
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para feedbacks
     */
    gerarDadosFeedback() {
        const tipos = ['Positivo', 'Desenvolvimento', 'Sugest√£o', 'Outros'];
        const categorias = ['T√©cnico', 'Atendimento', 'Vendas', 'Design', 'Lideran√ßa'];
        const dados = [];

        for (let i = 0; i < 100; i++) {
            dados.push({
                id: i + 1,
                remetente: `Colaborador ${i + 1}`,
                destinatario: `Colaborador ${Math.floor(Math.random() * 50) + 1}`,
                tipo: tipos[Math.floor(Math.random() * tipos.length)],
                categoria: categorias[Math.floor(Math.random() * categorias.length)],
                mensagem: `Feedback de exemplo ${i + 1}`,
                dataEnvio: this.gerarDataAleatoria(),
                visualizado: Math.random() > 0.3,
                util: Math.random() > 0.4
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para humor
     */
    gerarDadosHumor() {
        const humores = ['Muito Triste', 'Triste', 'Neutro', 'Feliz', 'Muito Feliz'];
        const dados = [];

        for (let i = 0; i < 200; i++) {
            dados.push({
                id: i + 1,
                colaborador: `Colaborador ${Math.floor(Math.random() * 30) + 1}`,
                humor: humores[Math.floor(Math.random() * humores.length)],
                pontuacao: Math.floor(Math.random() * 5) + 1,
                dataRegistro: this.gerarDataAleatoria(),
                descricao: Math.random() > 0.5 ? 'Descri√ß√£o do humor' : null
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para colaboradores
     */
    gerarDadosColaboradores() {
        const departamentos = ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'];
        const cargos = ['Analista', 'Gerente', 'Coordenador', 'Supervisor', 'Assistente'];
        const status = ['Ativo', 'Inativo', 'F√©rias', 'Licen√ßa'];
        const dados = [];

        for (let i = 0; i < 80; i++) {
            dados.push({
                id: i + 1,
                nome: `Colaborador ${i + 1}`,
                email: `colaborador${i + 1}@empresa.com`,
                departamento: departamentos[Math.floor(Math.random() * departamentos.length)],
                cargo: cargos[Math.floor(Math.random() * cargos.length)],
                dataAdmissao: this.gerarDataAleatoria(),
                status: status[Math.floor(Math.random() * status.length)],
                salario: (Math.random() * 10000 + 2000).toFixed(2)
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para m√©dias de feedback
     */
    gerarDadosMedias() {
        const departamentos = ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'];
        const dados = [];

        for (let i = 0; i < 20; i++) {
            dados.push({
                id: i + 1,
                departamento: departamentos[Math.floor(Math.random() * departamentos.length)],
                mediaGeral: (Math.random() * 2 + 3).toFixed(1),
                totalFeedbacks: Math.floor(Math.random() * 50) + 10,
                periodo: '2024',
                tendencia: Math.random() > 0.5 ? 'Positiva' : 'Negativa'
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para ranking de gamifica√ß√£o
     */
    gerarDadosRanking() {
        const dados = [];

        for (let i = 0; i < 30; i++) {
            dados.push({
                posicao: i + 1,
                colaborador: `Colaborador ${i + 1}`,
                departamento: ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'][Math.floor(Math.random() * 5)],
                pontos: Math.floor(Math.random() * 1000) + 100,
                lumicoins: Math.floor(Math.random() * 500) + 50,
                atividades: Math.floor(Math.random() * 100) + 10
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para resumo de atividades
     */
    gerarDadosResumo() {
        const dados = [];

        for (let i = 0; i < 12; i++) {
            dados.push({
                id: i + 1,
                mes: this.obterNomeMes(i + 1),
                totalFeedbacks: Math.floor(Math.random() * 200) + 50,
                totalReconhecimentos: Math.floor(Math.random() * 100) + 20,
                totalAvaliacoes: Math.floor(Math.random() * 50) + 10,
                engajamento: (Math.random() * 20 + 70).toFixed(1) + '%'
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para turnovers
     */
    gerarDadosTurnover() {
        const dados = [];

        for (let i = 0; i < 15; i++) {
            dados.push({
                id: i + 1,
                colaborador: `Colaborador ${i + 1}`,
                departamento: ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'][Math.floor(Math.random() * 5)],
                dataSaida: this.gerarDataAleatoria(),
                motivo: ['Demiss√£o', 'Pedido de demiss√£o', 'Aposentadoria', 'T√©rmino de contrato'][Math.floor(Math.random() * 4)],
                tempoEmpresa: Math.floor(Math.random() * 60) + 1 + ' meses'
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para PDI
     */
    gerarDadosPDI() {
        const status = ['Ativo', 'Conclu√≠do', 'Pausado', 'Cancelado'];
        const dados = [];

        for (let i = 0; i < 40; i++) {
            dados.push({
                id: i + 1,
                colaborador: `Colaborador ${i + 1}`,
                objetivo: `Objetivo de desenvolvimento ${i + 1}`,
                status: status[Math.floor(Math.random() * status.length)],
                dataInicio: this.gerarDataAleatoria(),
                dataFim: this.gerarDataAleatoria(),
                progresso: Math.floor(Math.random() * 100) + 1,
                responsavel: `Gestor ${Math.floor(Math.random() * 10) + 1}`
            });
        }

        return dados;
    }

    /**
     * Gera dados simulados para pesquisas r√°pidas
     */
    gerarDadosPesquisas() {
        const tipos = ['M√∫ltipla Escolha', 'Escala', 'Texto Livre'];
        const status = ['Ativa', 'Conclu√≠da', 'Pausada'];
        const dados = [];

        for (let i = 0; i < 25; i++) {
            dados.push({
                id: i + 1,
                titulo: `Pesquisa ${i + 1}`,
                tipo: tipos[Math.floor(Math.random() * tipos.length)],
                status: status[Math.floor(Math.random() * status.length)],
                dataInicio: this.gerarDataAleatoria(),
                dataFim: this.gerarDataAleatoria(),
                totalRespostas: Math.floor(Math.random() * 100) + 10,
                departamento: ['RH', 'TI', 'Vendas', 'Financeiro', 'Opera√ß√µes'][Math.floor(Math.random() * 5)]
            });
        }

        return dados;
    }

    /**
     * Gera uma data aleat√≥ria
     */
    gerarDataAleatoria() {
        const inicio = new Date(2023, 0, 1);
        const fim = new Date();
        const data = new Date(inicio.getTime() + Math.random() * (fim.getTime() - inicio.getTime()));
        return data.toLocaleDateString('pt-BR');
    }

    /**
     * Obt√©m o nome do m√™s
     */
    obterNomeMes(numero) {
        const meses = [
            'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];
        return meses[numero - 1];
    }

    /**
     * Aplica os filtros selecionados
     */
    aplicarFiltros() {
        this.filtrosAtivos.periodo = document.getElementById('historico-periodo')?.value || 'todos';
        this.filtrosAtivos.tipo = document.getElementById('historico-tipo')?.value || 'todos';
        this.filtrosAtivos.departamento = document.getElementById('historico-departamento')?.value || 'todos';

        this.atualizarExibicao();
    }

    /**
     * Atualiza a exibi√ß√£o das se√ß√µes baseado nos filtros
     */
    atualizarExibicao() {
        const secoes = document.querySelectorAll('.historico-section');
        
        secoes.forEach(secao => {
            const tipoSecao = secao.getAttribute('data-tipo');
            const deveExibir = this.deveExibirSecao(tipoSecao);
            
            if (deveExibir) {
                secao.classList.remove('hidden');
                this.carregarDadosSecao(tipoSecao);
            } else {
                secao.classList.add('hidden');
            }
        });
    }

    /**
     * Verifica se uma se√ß√£o deve ser exibida baseado nos filtros
     */
    deveExibirSecao(tipoSecao) {
        if (this.filtrosAtivos.tipo === 'todos') {
            return true;
        }
        
        return this.filtrosAtivos.tipo === tipoSecao;
    }

    /**
     * Carrega os dados de uma se√ß√£o espec√≠fica
     */
    carregarDadosSecao(tipoSecao) {
        const dados = this.dadosHistorico[tipoSecao];
        if (!dados) return;

        const loadingElement = document.getElementById(`${tipoSecao}-loading`);
        const tableElement = document.getElementById(`${tipoSecao}-table`);

        if (loadingElement) loadingElement.style.display = 'none';
        if (tableElement) {
            tableElement.style.display = 'block';
            this.renderizarTabela(tipoSecao, dados, tableElement);
        }
    }

    /**
     * Renderiza uma tabela com os dados fornecidos
     */
    renderizarTabela(tipoSecao, dados, container) {
        // Verifica se os dados t√™m a nova estrutura com metadados
        const dadosProcessados = dados.dados || dados;
        const metadados = dados.metadados || {};
        const colunas = metadados.colunas || (dadosProcessados.length > 0 ? Object.keys(dadosProcessados[0]) : []);
        
        const dadosFiltrados = this.filtrarDados(dadosProcessados, tipoSecao);
        
        if (dadosFiltrados.length === 0) {
            container.innerHTML = `
                <div class="historico-empty">
                    <i class="fas fa-inbox"></i>
                    <h4>Nenhum dado encontrado</h4>
                    <p>N√£o h√° dados para exibir com os filtros selecionados.</p>
                </div>
            `;
            return;
        }

        // Aplica pagina√ß√£o
        const dadosPaginados = this.paginarDados(dadosFiltrados, tipoSecao);

        // Determina se precisa de scroll horizontal (mais de 6 colunas)
        const precisaScroll = colunas.length > 6;
        const classeScroll = precisaScroll ? 'table-scroll-horizontal' : '';

        let html = `
            <div class="table-wrapper ${classeScroll}">
                <table class="historico-table">
                    <thead>
                        <tr>
                            ${colunas.map(col => `<th>${col}</th>`).join('')}
                        </tr>
                    </thead>
                    <tbody>
        `;

        dadosPaginados.forEach(item => {
            html += '<tr>';
            colunas.forEach(col => {
                const valor = item[col] || '';
                html += `<td>${valor}</td>`;
            });
            html += '</tr>';
        });

        html += `
                    </tbody>
                </table>
            </div>
        `;

        // Adiciona controles de pagina√ß√£o
        html += this.renderizarPaginacao(dadosFiltrados.length, tipoSecao);

        container.innerHTML = html;
    }

    /**
     * Pagina os dados para exibi√ß√£o
     */
    paginarDados(dados, tipoSecao) {
        const inicio = (this.paginacao.paginaAtual - 1) * this.paginacao.itensPorPagina;
        const fim = inicio + this.paginacao.itensPorPagina;
        return dados.slice(inicio, fim);
    }

    /**
     * Renderiza os controles de pagina√ß√£o
     */
    renderizarPaginacao(totalItens, tipoSecao) {
        const totalPaginas = Math.ceil(totalItens / this.paginacao.itensPorPagina);
        
        if (totalPaginas <= 1) {
            return '';
        }

        const paginaAtual = this.paginacao.paginaAtual;
        const inicio = (paginaAtual - 1) * this.paginacao.itensPorPagina + 1;
        const fim = Math.min(paginaAtual * this.paginacao.itensPorPagina, totalItens);

        let html = `
            <div class="pagination-container">
                <div class="pagination-info">
                    Mostrando ${inicio}-${fim} de ${totalItens} registros
                </div>
                <div class="pagination-controls">
        `;

        // Bot√£o anterior
        if (paginaAtual > 1) {
            html += `<button class="pagination-btn" onclick="historicoManager.irParaPagina('${tipoSecao}', ${paginaAtual - 1})">
                <i class="fas fa-chevron-left"></i> Anterior
            </button>`;
        }

        // N√∫meros das p√°ginas
        const inicioPagina = Math.max(1, paginaAtual - 2);
        const fimPagina = Math.min(totalPaginas, paginaAtual + 2);

        if (inicioPagina > 1) {
            html += `<button class="pagination-btn" onclick="historicoManager.irParaPagina('${tipoSecao}', 1)">1</button>`;
            if (inicioPagina > 2) {
                html += `<span class="pagination-ellipsis">...</span>`;
            }
        }

        for (let i = inicioPagina; i <= fimPagina; i++) {
            const classeAtiva = i === paginaAtual ? 'active' : '';
            html += `<button class="pagination-btn ${classeAtiva}" onclick="historicoManager.irParaPagina('${tipoSecao}', ${i})">${i}</button>`;
        }

        if (fimPagina < totalPaginas) {
            if (fimPagina < totalPaginas - 1) {
                html += `<span class="pagination-ellipsis">...</span>`;
            }
            html += `<button class="pagination-btn" onclick="historicoManager.irParaPagina('${tipoSecao}', ${totalPaginas})">${totalPaginas}</button>`;
        }

        // Bot√£o pr√≥ximo
        if (paginaAtual < totalPaginas) {
            html += `<button class="pagination-btn" onclick="historicoManager.irParaPagina('${tipoSecao}', ${paginaAtual + 1})">
                Pr√≥ximo <i class="fas fa-chevron-right"></i>
            </button>`;
        }

        html += `
                </div>
            </div>
        `;

        return html;
    }

    /**
     * Vai para uma p√°gina espec√≠fica
     */
    irParaPagina(tipoSecao, pagina) {
        this.paginacao.paginaAtual = pagina;
        const dados = this.dadosHistorico[tipoSecao];
        if (dados) {
            const container = document.getElementById(`${tipoSecao}-table`);
            if (container) {
                this.renderizarTabela(tipoSecao, dados, container);
            }
        }
    }

    /**
     * Obt√©m as colunas para cada tipo de tabela
     */
    obterColunasTabela(tipoSecao) {
        const colunas = {
            avaliacao: [
                { campo: 'colaborador', titulo: 'Colaborador', tipo: 'texto' },
                { campo: 'departamento', titulo: 'Departamento', tipo: 'departamento' },
                { campo: 'avaliador', titulo: 'Avaliador', tipo: 'texto' },
                { campo: 'nota', titulo: 'Nota', tipo: 'numero', classe: 'number' },
                { campo: 'dataAvaliacao', titulo: 'Data', tipo: 'data', classe: 'date' },
                { campo: 'status', titulo: 'Status', tipo: 'status', classe: 'status' }
            ],
            feedback: [
                { campo: 'remetente', titulo: 'Remetente', tipo: 'texto' },
                { campo: 'destinatario', titulo: 'Destinat√°rio', tipo: 'texto' },
                { campo: 'tipo', titulo: 'Tipo', tipo: 'texto' },
                { campo: 'categoria', titulo: 'Categoria', tipo: 'texto' },
                { campo: 'dataEnvio', titulo: 'Data Envio', tipo: 'data', classe: 'date' },
                { campo: 'visualizado', titulo: 'Visualizado', tipo: 'boolean' },
                { campo: 'util', titulo: '√ötil', tipo: 'boolean' }
            ],
            humor: [
                { campo: 'colaborador', titulo: 'Colaborador', tipo: 'texto' },
                { campo: 'humor', titulo: 'Humor', tipo: 'texto' },
                { campo: 'pontuacao', titulo: 'Pontua√ß√£o', tipo: 'numero', classe: 'number' },
                { campo: 'dataRegistro', titulo: 'Data', tipo: 'data', classe: 'date' },
                { campo: 'descricao', titulo: 'Descri√ß√£o', tipo: 'texto' }
            ],
            colaboradores: [
                { campo: 'nome', titulo: 'Nome', tipo: 'texto' },
                { campo: 'email', titulo: 'Email', tipo: 'texto' },
                { campo: 'departamento', titulo: 'Departamento', tipo: 'departamento' },
                { campo: 'cargo', titulo: 'Cargo', tipo: 'texto' },
                { campo: 'dataAdmissao', titulo: 'Admiss√£o', tipo: 'data', classe: 'date' },
                { campo: 'status', titulo: 'Status', tipo: 'status', classe: 'status' }
            ],
            medias: [
                { campo: 'departamento', titulo: 'Departamento', tipo: 'departamento' },
                { campo: 'mediaGeral', titulo: 'M√©dia Geral', tipo: 'numero', classe: 'number' },
                { campo: 'totalFeedbacks', titulo: 'Total Feedbacks', tipo: 'numero', classe: 'number' },
                { campo: 'periodo', titulo: 'Per√≠odo', tipo: 'texto' },
                { campo: 'tendencia', titulo: 'Tend√™ncia', tipo: 'texto' }
            ],
            ranking: [
                { campo: 'posicao', titulo: 'Posi√ß√£o', tipo: 'numero', classe: 'number' },
                { campo: 'colaborador', titulo: 'Colaborador', tipo: 'texto' },
                { campo: 'departamento', titulo: 'Departamento', tipo: 'departamento' },
                { campo: 'pontos', titulo: 'Pontos', tipo: 'numero', classe: 'number' },
                { campo: 'lumicoins', titulo: 'Lumicoins', tipo: 'numero', classe: 'number' },
                { campo: 'atividades', titulo: 'Atividades', tipo: 'numero', classe: 'number' }
            ],
            resumo: [
                { campo: 'mes', titulo: 'M√™s', tipo: 'texto' },
                { campo: 'totalFeedbacks', titulo: 'Total Feedbacks', tipo: 'numero', classe: 'number' },
                { campo: 'totalReconhecimentos', titulo: 'Total Reconhecimentos', tipo: 'numero', classe: 'number' },
                { campo: 'totalAvaliacoes', titulo: 'Total Avalia√ß√µes', tipo: 'numero', classe: 'number' },
                { campo: 'engajamento', titulo: 'Engajamento', tipo: 'texto' }
            ],
            turnover: [
                { campo: 'colaborador', titulo: 'Colaborador', tipo: 'texto' },
                { campo: 'departamento', titulo: 'Departamento', tipo: 'departamento' },
                { campo: 'dataSaida', titulo: 'Data Sa√≠da', tipo: 'data', classe: 'date' },
                { campo: 'motivo', titulo: 'Motivo', tipo: 'texto' },
                { campo: 'tempoEmpresa', titulo: 'Tempo Empresa', tipo: 'texto' }
            ],
            pdi: [
                { campo: 'colaborador', titulo: 'Colaborador', tipo: 'texto' },
                { campo: 'objetivo', titulo: 'Objetivo', tipo: 'texto' },
                { campo: 'status', titulo: 'Status', tipo: 'status', classe: 'status' },
                { campo: 'dataInicio', titulo: 'Data In√≠cio', tipo: 'data', classe: 'date' },
                { campo: 'dataFim', titulo: 'Data Fim', tipo: 'data', classe: 'date' },
                { campo: 'progresso', titulo: 'Progresso', tipo: 'numero', classe: 'number' }
            ],
            pesquisas: [
                { campo: 'titulo', titulo: 'T√≠tulo', tipo: 'texto' },
                { campo: 'tipo', titulo: 'Tipo', tipo: 'texto' },
                { campo: 'status', titulo: 'Status', tipo: 'status', classe: 'status' },
                { campo: 'dataInicio', titulo: 'Data In√≠cio', tipo: 'data', classe: 'date' },
                { campo: 'dataFim', titulo: 'Data Fim', tipo: 'data', classe: 'date' },
                { campo: 'totalRespostas', titulo: 'Total Respostas', tipo: 'numero', classe: 'number' }
            ]
        };

        return colunas[tipoSecao] || [];
    }

    /**
     * Filtra os dados baseado nos filtros ativos
     */
    filtrarDados(dados, tipoSecao) {
        let dadosFiltrados = [...dados];

        // Filtro por departamento - busca em v√°rias colunas poss√≠veis
        if (this.filtrosAtivos.departamento !== 'todos') {
            dadosFiltrados = dadosFiltrados.filter(item => {
                // Busca em diferentes poss√≠veis nomes de colunas de departamento
                const possiveisColunasDep = [
                    'Departamento', 'departamento', 'Para Departamento', 'Depto', 'Setor'
                ];
                
                for (let coluna of possiveisColunasDep) {
                    if (item[coluna]) {
                        const valorDep = item[coluna].toString().toLowerCase();
                        if (valorDep.includes(this.filtrosAtivos.departamento.toLowerCase())) {
                            return true;
                        }
                    }
                }
                return false;
            });
        }

        // Filtro por per√≠odo - busca em v√°rias colunas poss√≠veis de data
        if (this.filtrosAtivos.periodo !== 'todos') {
            dadosFiltrados = dadosFiltrados.filter(item => {
                return this.itemContemAno(item, this.filtrosAtivos.periodo);
            });
        }

        return dadosFiltrados;
    }

    /**
     * Verifica se um item cont√©m o ano especificado em qualquer coluna de data
     */
    itemContemAno(item, ano) {
        // Lista abrangente de poss√≠veis colunas de data
        const possiveisColunasData = [
            'Data', 'data', 'Data Admiss√£o', 'Data de Nascimento', 'Data de Cadastro',
            '√öltimo Acesso', 'Data do turnover', 'Data √çnicio', 'Data Final',
            'Data de cria√ß√£o', '√öltima atualiza√ß√£o', 
            'Per√≠odo inicial avaliado da √∫ltima avalia√ß√£o de desempenho',
            'Per√≠odo final avaliado da √∫ltima avalia√ß√£o de desempenho'
        ];
        
        for (let coluna of possiveisColunasData) {
            if (item[coluna]) {
                const valorData = item[coluna].toString().trim();
                
                if (valorData && valorData !== '-' && valorData !== 'N/A') {
                    // Extrai ano da data usando diferentes padr√µes
                    const anosEncontrados = this.extrairAnosDaData(valorData);
                    
                    if (anosEncontrados.includes(ano)) {
                        return true;
                    }
                }
            }
        }
        
        return false; // Se n√£o encontrar o ano em nenhuma coluna de data
    }

    /**
     * Extrai todos os anos poss√≠veis de uma string de data
     */
    extrairAnosDaData(valorData) {
        const anos = [];
        
        // Padr√£o 1: Anos de 4 d√≠gitos (2020-2030)
        const matchAnos = valorData.match(/20[0-9]{2}/g);
        if (matchAnos) {
            anos.push(...matchAnos);
        }
        
        // Padr√£o 2: Data no formato DD/MM/YYYY ou DD-MM-YYYY
        const matchDataCompleta = valorData.match(/\d{1,2}[\/\-]\d{1,2}[\/\-](20\d{2})/);
        if (matchDataCompleta) {
            anos.push(matchDataCompleta[1]);
        }
        
        // Padr√£o 3: Data no formato YYYY-MM-DD
        const matchDataISO = valorData.match(/(20\d{2})\-\d{1,2}\-\d{1,2}/);
        if (matchDataISO) {
            anos.push(matchDataISO[1]);
        }
        
        // Padr√£o 4: Data no formato MM/YYYY ou MM-YYYY
        const matchMesAno = valorData.match(/\d{1,2}[\/\-](20\d{2})/);
        if (matchMesAno) {
            anos.push(matchMesAno[1]);
        }
        
        // Padr√£o 5: Apenas ano (YYYY)
        const matchAnoSozinho = valorData.match(/^(20\d{2})$/);
        if (matchAnoSozinho) {
            anos.push(matchAnoSozinho[1]);
        }
        
        // Padr√£o 6: Data por extenso que contenha ano
        const matchAnoTexto = valorData.match(/\b(20\d{2})\b/);
        if (matchAnoTexto) {
            anos.push(matchAnoTexto[1]);
        }
        
        // Remove duplicatas e filtra anos v√°lidos
        const anosUnicos = [...new Set(anos)].filter(ano => {
            const anoNum = parseInt(ano);
            return anoNum >= 2020 && anoNum <= 2030; // Range v√°lido
        });
        
        return anosUnicos;
    }

    /**
     * Formata um valor baseado no tipo
     */
    formatarValor(valor, tipo) {
        if (valor === null || valor === undefined) return '-';

        switch (tipo) {
            case 'numero':
                return typeof valor === 'number' ? valor.toLocaleString('pt-BR') : valor;
            case 'data':
                return valor;
            case 'boolean':
                return valor ? 
                    '<span class="status ativo">Sim</span>' : 
                    '<span class="status inativo">N√£o</span>';
            case 'status':
                const classe = this.obterClasseStatus(valor);
                return `<span class="status ${classe}">${valor}</span>`;
            case 'departamento':
                const classeDept = this.obterClasseDepartamento(valor);
                return `<span class="department-badge ${classeDept}">${valor}</span>`;
            default:
                return valor;
        }
    }

    /**
     * Obt√©m a classe CSS para um status
     */
    obterClasseStatus(status) {
        const statusMap = {
            'Ativo': 'ativo',
            'Inativo': 'inativo',
            'Pendente': 'pendente',
            'Conclu√≠do': 'concluido',
            'Conclu√≠da': 'concluido',
            'Ativa': 'ativo',
            'Pausada': 'pendente',
            'Cancelado': 'inativo'
        };
        return statusMap[status] || 'neutral';
    }

    /**
     * Obt√©m a classe CSS para um departamento
     */
    obterClasseDepartamento(departamento) {
        const deptMap = {
            'RH': 'department-rh',
            'TI': 'department-ti',
            'Vendas': 'department-vendas',
            'Financeiro': 'department-financeiro',
            'Opera√ß√µes': 'department-operacoes'
        };
        return deptMap[departamento] || '';
    }

    /**
     * Alterna a exibi√ß√£o de uma se√ß√£o
     */
    toggleSecao(secao) {
        secao.classList.toggle('collapsed');
    }

    /**
     * Exporta dados de uma se√ß√£o espec√≠fica
     */
    exportHistoricoData(tipoSecao) {
        const dados = this.dadosHistorico[tipoSecao];
        if (!dados) {
            this.mostrarNotificacao('Nenhum dado dispon√≠vel para exportar', 'warning');
            return;
        }

        // Verifica se os dados t√™m a nova estrutura com metadados
        const dadosProcessados = dados.dados || dados;
        const metadados = dados.metadados || {};
        
        if (!dadosProcessados || dadosProcessados.length === 0) {
            this.mostrarNotificacao('Nenhum dado dispon√≠vel para exportar', 'warning');
            return;
        }

        try {
            const dadosFiltrados = this.filtrarDados(dadosProcessados, tipoSecao);
            // Usa as colunas dos metadados ou obt√©m dinamicamente
            const colunas = metadados.colunas || (dadosProcessados.length > 0 ? Object.keys(dadosProcessados[0]) : []);
            
            // Cria CSV com encoding UTF-8 e BOM para compatibilidade com Excel
            let csv = '\uFEFF'; // BOM para UTF-8
            csv += colunas.map(col => this.escapeCSV(col)).join(',') + '\n';
            
            dadosFiltrados.forEach(item => {
                const linha = colunas.map(col => {
                    const valor = item[col] || '';
                    return this.escapeCSV(valor);
                }).join(',');
                csv += linha + '\n';
            });

            // Download do arquivo
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            
            // Nome do arquivo com data e hora
            const agora = new Date();
            const dataHora = agora.toISOString().replace(/[:.]/g, '-').split('T')[0] + '_' + 
                           agora.toTimeString().split(' ')[0].replace(/:/g, '-');
            link.setAttribute('download', `historico_${tipoSecao}_${dataHora}.csv`);
            
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Limpa o URL
            setTimeout(() => URL.revokeObjectURL(url), 100);
            
            this.mostrarNotificacao(`Dados de ${tipoSecao} exportados com sucesso! (${dadosFiltrados.length} registros)`, 'success');
            
        } catch (error) {
            console.error('Erro ao exportar dados:', error);
            this.mostrarNotificacao('Erro ao exportar dados', 'error');
        }
    }

    /**
     * Escapa valores para CSV
     * @param {*} value - Valor a ser escapado
     * @returns {string} - Valor escapado
     */
    escapeCSV(value) {
        if (value === null || value === undefined) return '';
        
        const str = String(value);
        
        // Se cont√©m v√≠rgula, quebra de linha ou aspas, envolve em aspas
        if (str.includes(',') || str.includes('\n') || str.includes('\r') || str.includes('"')) {
            return '"' + str.replace(/"/g, '""') + '"';
        }
        
        return str;
    }

    /**
     * Mostra notifica√ß√£o para o usu√°rio
     * @param {string} mensagem - Mensagem a ser exibida
     * @param {string} tipo - Tipo da notifica√ß√£o (success, warning, error)
     */
    mostrarNotificacao(mensagem, tipo = 'info') {
        // Remove notifica√ß√£o anterior se existir
        const notificacaoAnterior = document.querySelector('.historico-notification');
        if (notificacaoAnterior) {
            notificacaoAnterior.remove();
        }

        // Cria nova notifica√ß√£o
        const notificacao = document.createElement('div');
        notificacao.className = `historico-notification historico-notification-${tipo}`;
        notificacao.innerHTML = `
            <i class="fas fa-${tipo === 'success' ? 'check-circle' : tipo === 'warning' ? 'exclamation-triangle' : tipo === 'error' ? 'times-circle' : 'info-circle'}"></i>
            <span>${mensagem}</span>
        `;

        // Adiciona ao DOM
        document.body.appendChild(notificacao);

        // Remove ap√≥s 3 segundos
        setTimeout(() => {
            if (notificacao.parentNode) {
                notificacao.remove();
            }
        }, 3000);
    }

    /**
     * Mostra uma mensagem de erro
     */
    mostrarErro(mensagem) {
        console.error(mensagem);
        // Em produ√ß√£o, isso mostraria uma notifica√ß√£o para o usu√°rio
    }
}

// Fun√ß√µes globais para compatibilidade
window.loadHistoricoData = function() {
    if (window.historicoManager) {
        window.historicoManager.aplicarFiltros();
    }
};

window.exportHistoricoData = function(tipoSecao) {
    if (window.historicoManager) {
        window.historicoManager.exportHistoricoData(tipoSecao);
    }
};

// Inicializa o m√≥dulo quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    window.historicoManager = new HistoricoManager();
});

// Fun√ß√£o global para navega√ß√£o de p√°ginas
window.irParaPagina = function(tipoSecao, pagina) {
    if (window.historicoManager) {
        window.historicoManager.irParaPagina(tipoSecao, pagina);
    }
};
